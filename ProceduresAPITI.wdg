#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ProceduresAPITI
 major_version : 30
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
 options : 256
procedure_set :
 identifier : 0x17e570d900207867
 internal_properties : HwAAAB4AAADjksEavC8JwuEiHc63C+ul0ggS/BOiC8PJfOp/6aEkSKX4qEWcBw==
 code_elements :
  type_code : 31
  p_codes : []
  procedures :
   -
     name : ImporterProduitTI
     internal_properties : HwAAAB4AAABoOApEUruVtV/EH2uuVsSSS//T+9BArbQEG2NUO/BgK3B4gN5EOSUbmJPUqcIaVo5lFsEXQiiUaH0vMS4TjMVnbLlkU0Y1WWDJzjzl/Ln8Wx7teQKy8RRubic6sMhd3YNWBRymzox/RsIUnr9MJBvyBPV1/KymFbq7EaMh9v43Y3/md1Ke1FM=
     procedure_id : 1721906509851490407
     type_code : 15
     code : |1+
      // R√©sum√© : <indiquez ici ce que fait la proc√©dure>
      // Syntaxe :
      //[ <R√©sultat> = ] ImporterProduitTI (<sPartNumber> est cha√Æne)
      //
      // Param√®tres :
      //	sPartNumber (cha√Æne ANSI) : <indiquez ici le r√¥le de sPartNumber>
      // Valeur de retour :
      // 	bool√©en : <indiquez ici le r√¥le de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      proc√©dure ImporterProduitTI(sPartNumber est une cha√Æne) : bool√©en
      SI PAS TokenEstValide() alors
      	SI PAS AutentificationAPITI() alors
      		Erreur("Impossible de renouveler le token API.")
      		RENVOYER Faux
      	FIN
      FIN
      
      reqProduit est une httpRequ√™te
      reqProduit.url = "https://transact.ti.com/v2/store/products/" + sPartNumber +"?currency=EUR"<¬ßaad:0¬ß>
      reqProduit.M√©thode = httpGet
      reqProduit.Ent√™te["Authorization"] = "Bearer " +gAccessToken
      
      repProduit est une httpR√©ponse = HTTPEnvoie(reqProduit)
      
      SI repProduit.CodeEtat <> 200 alors
      	Erreur("Erreur API TI (" + repProduit.Code√âtat + ") : " + repProduit.Contenu)
      	RENVOYER Faux
      FIN
      
      cJSONProduit est un Variant = JSONVersVariant(repProduit.Contenu)
      
      RENVOYER TraiterProduit(cJSONProduit)
     type : 458752
   -
     name : TokenEstValide
     procedure_id : 1721906509851555943
     type_code : 15
     code : |1+
      // R√©sum√© : Renvoie VRAI si le token est valide, FAUX si expir√©
      // Syntaxe :
      //[ <R√©sultat> = ] TokenEstValide ()
      //
      // Param√®tres :
      //	Aucun
      // Valeur de retour :
      // 	bool√©en : <indiquez ici le r√¥le de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      proc√©dure TokenEstValide() : bool√©en
      RENVOYER DateHeureSys() < gHeureExpirationToken
      
     type : 458752
   -
     name : AutentificationAPITI
     procedure_id : 1721906509851621479
     type_code : 15
     code : |1+
      // R√©sum√© : Permet de se connecter √† l'API de TI et de r√©cup√©rer le Token de connexion
      // Syntaxe :
      //[ <R√©sultat> = ] AutentificationAPITI ()
      //
      // Param√®tres :
      //	Aucun
      // Valeur de retour :
      // 	bool√©en : Vrai si la connexion a r√©ussi, Faux sinon.
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      proc√©dure AutentificationAPITI() : bool√©en
      sRequeteAuthentification est une httpRequ√™te
      
      sRequeteAuthentification.URL					= "https://transact.ti.com/v1/oauth/accesstoken"
      sRequeteAuthentification.Ent√™te["Content-Type"]	= "application/x-www-form-urlencoded"
      sRequeteAuthentification.Contenu				= Cha√ÆneConstruit("grant_type=client_credentials&client_id=%1&client_secret=%2", gCleAPI, gClientSecret)
      
      sReponseAuthentification est une httpR√©ponse = HTTPEnvoie(sRequeteAuthentification)
      
      SI sReponseAuthentification.CodeEtat = 200 alors
      	cJSON est un variant = JSONVersVariant(sReponseAuthentification.Contenu)
      
      	gAccessToken = cJSON.access_token
      
      	gHeureExpirationToken = DateHeureSys() +cJSON.expires_in
      
      	RENVOYER Vrai
      
      SINON
      	//cJSON est un Variant = JSONVersVariant(sReponseAuthentification.Contenu)
      	Erreur("√âchec authentification")
      	renvoyer FAUX
      FIN
      
     type : 458752
   -
     name : ImporterCatalogueTI
     procedure_id : 1721906509851687015
     type_code : 15
     code : |1+
      // R√©sum√© : <indiquez ici ce que fait la proc√©dure>
      // Syntaxe :
      //[ <R√©sultat> = ] ImporterCatalogueTI ()
      //
      // Param√®tres :
      //	Aucun
      // Valeur de retour :
      // 	bool√©en : <indiquez ici le r√¥le de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      proc√©dure ImporterCatalogueTI()
      
      // üîπ V√©rifier si le token est valide, sinon le renouveler
      SI PAS TokenEstValide() ALORS
      	SI PAS AutentificationAPITI() ALORS
      		Erreur("Impossible de renouveler le token API.")
      		RENVOYER Faux
      	FIN
      FIN
      
      // üîπ Pr√©parer la requ√™te API pour r√©cup√©rer tout le catalogue
      reqCatalogue est un httpRequ√™te
      reqCatalogue.URL						= "https://transact.ti.com/v2/store/products/catalog?currency=EUR"
      reqCatalogue.M√©thode					= httpGet
      reqCatalogue.Ent√™te["Authorization"]	= "Bearer " + gAccessToken
      
      // üîπ Envoyer la requ√™te et stocker la r√©ponse
      repCatalogue est un httpR√©ponse = HTTPEnvoie(reqCatalogue)
      
      // üîπ V√©rifier la r√©ponse API
      SI repCatalogue.CodeEtat <> 200 ALORS
      	Erreur("Erreur API TI (" + repCatalogue.CodeEtat + ") : " + repCatalogue.Contenu)
      	RENVOYER Faux
      FIN
      
      // üîπ Convertir la r√©ponse JSON en variant
      cJSONCatalogue est un Variant = JSONVersVariant(repCatalogue.Contenu)
      
      // üîπ V√©rifier si la conversion a r√©ussi
      SI cJSONCatalogue = Null ALORS
      	Erreur("Erreur de conversion JSON. R√©ponse brute : " + repCatalogue.Contenu)
      	RENVOYER Faux
      FIN
      
      
      
      // üîπ Boucler sur chaque produit du catalogue et l'importer
      cptProduitsImportes est un entier = 0
      POUR CHAQUE produitLocal DE cJSONCatalogue.catalog
      	sPartNumber est une cha√Æne = produitLocal.tiPartNumber
      
      	// Importer le produit
      	SI TraiterProduit(produitLocal) ALORS
      		cptProduitsImportes++
      	SINON
      		Erreur("√âchec de l'importation pour : " + sPartNumber)
      	FIN
      FIN
      
      Info("Importation termin√©e : " + cptProduitsImportes + " produits import√©s avec succ√®s.")
      RENVOYER Vrai
      
      
     type : 458752
   -
     name : TraiterProduit
     procedure_id : 1721906509851752551
     type_code : 15
     code : |1-
      // R√©sum√© : <indiquez ici ce que fait la proc√©dure>
      // Syntaxe :
      //[ <R√©sultat> = ] TraiterProduit (<cJSONProduit> est variant)
      //
      // Param√®tres :
      //	cJSONProduit (variant) : <indiquez ici le r√¥le de produitLocal>
      // Valeur de retour :
      // 	bool√©en : <indiquez ici le r√¥le de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      proc√©dure TraiterProduit(cJSONProduit est un Variant) : bool√©en
      Produit est un Enregistrement de Product
      idProduitLocal est un entier sur 8 octets
      idPrixAjoute est un entier sur 8 octets
      
      
      SI HLitRecherchePremier(Product, tiPartNumber, cJSONProduit.tiPartNumber) ALORS
      	idProduitLocal = Product.idProduct
      SINON
      	idProduitLocal = 0
      
      FIN
      Produit.tiPartNumber						= cJSONProduit.tiPartNumber.value
      Produit.genericPartNumber					= cJSONProduit.genericPartNumber.value
      Produit.description							= cJSONProduit.description.value
      Produit.quantity							= cJSONProduit.quantity.value
      Produit.limit								= cJSONProduit.limit.value
      Produit.minimumOrderQuantity				= cJSONProduit.minimumOrderQuantity.value
      Produit.standardPackQuantity				= cJSONProduit.standardPackQuantity.value
      Produit.exportControlClassificationNumber	= cJSONProduit.exportControlClassificationNumber.value
      Produit.htsCode								= cJSONProduit.htsCode.value
      Produit.pinCount							= cJSONProduit.pinCount.value
      Produit.packageType							= cJSONProduit.packageType.value
      Produit.packageCarrier						= cJSONProduit.packageCarrier.value
      Produit.customReel							= cJSONProduit.customReel.value
      Produit.lifeCycle							= cJSONProduit.lifeCycle.value
      Produit.buyNowURL							= cJSONProduit.buyNowURL.value
      Produit.lastUpdateTime						= DateHeureSys()
      
      SI idProduitLocal = 0 ALORS
      	Product				= Produit
      	SI HAjoute(Product) ALORS
      		// Si l'ajout r√©ussit, r√©cup√©rer l'ID du produit ajout√©
      		idProduitLocal = Product.idProduct
      	SINON
      		Erreur("L'ajout du produit a √©chou√©.")
      		RENVOYER Faux
      	FIN
      SINON
      	Produit.idProduct	= idProduitLocal
      	Product				= Produit
      	HModifie(Product)
      FIN
      POUR CHAQUE pricingLocal DE cJSONProduit.pricing
      	// V√©rifier si le pricing existe d√©j√† en base
      	Prix est un Enregistrement de Pricing
      	SI HLitRecherchePremier(Pricing, idProduct, idProduitLocal) ALORS
      		// Mise √† jour du pricing si n√©cessaire
      		Prix.idProduct	= idProduitLocal
      		Prix.currency	= pricingLocal.currency.value
      		Pricing 		= Prix
      		HModifie(Pricing)
      		idPrixAjoute = Pricing.idPricing
      	SINON
      		// Ajouter un nouveau pricing
      		Prix.idProduct	= idProduitLocal
      		Prix.currency	= pricingLocal.currency.value
      		SI HAjoute(Pricing,Prix) ALORS
      			// Si l'ajout r√©ussit, r√©cup√©rer l'ID du produit ajout√©
      			idPrixAjoute = Pricing.idPricing
      		SINON
      			Erreur("L'ajout du produit a √©chou√©.")
      			RENVOYER Faux
      		FIN
      
      	FIN
      
      	// üîπ Traitement des nouveaux PriceBreaks associ√©s
      	POUR CHAQUE priceBreakLocal DE pricingLocal.priceBreaks
      		// V√©rifier si le PriceBreak existe d√©j√† pour cet idPricing et cette quantit√©
      		existeDeja est un bool√©en = Faux
      		// Recherche des PriceBreak correspondant √† l'idPricing
      		SI HLitRecherchePremier(PriceBreak, idPricing, idPrixAjoute) ALORS
      			TANTQUE HTrouve(PriceBreak)
      				SI PriceBreak.priceBreakQuantity = priceBreakLocal.priceBreakQuantity.value ALORS
      					// Mise √† jour du prix existant
      					PriceBreak.price = priceBreakLocal.price.value
      					HModifie(PriceBreak)
      					existeDeja = Vrai
      					Sortir // Sortir de la boucle d√®s qu'on a trouv√©
      				FIN
      				HLitSuivant(PriceBreak)
      			FIN
      		FIN
      
      		SI PAS existeDeja ALORS
      			// Ajouter un nouveau PriceBreak
      			pb est un Enregistrement de PriceBreak
      			pb.idPricing			= idPrixAjoute
      			pb.priceBreakQuantity	= priceBreakLocal.priceBreakQuantity.value
      			pb.price				= priceBreakLocal.price.value
      			HAjoute(PriceBreak, pb)
      		FIN
      	FIN
      FIN
      
      // üîπ Traitement des donn√©es d'inventaire futur
      POUR CHAQUE invFuturLocal DE cJSONProduit.futureInventory
      	SI invFuturLocal.forecastQuantity <> Null ALORS
      		// V√©rifier si l'entr√©e existe d√©j√† pour cette date et ce produit
      		existeDeja est un bool√©en = Faux
      
      		// Recherche via l'index "idProduct" dans FutureInventory
      		SI HLitRecherchePremier(FutureInventory, idProduct, idProduitLocal) ALORS
      			TANTQUE HTrouve(FutureInventory)
      				// Comparer la date de forecast
      				SI FutureInventory.forecastDate = Remplace( invFuturLocal.forecastDate.value,"-","") ALORS
      					// Mise √† jour de la quantit√© existante
      					FutureInventory.forecastQuantity = invFuturLocal.forecastQuantity.value
      					HModifie(FutureInventory)
      					existeDeja = Vrai
      					Sortir // Sortir de la boucle
      				FIN
      				HLitSuivant(FutureInventory)
      			FIN
      		FIN
      
      		SI PAS existeDeja ALORS
      			// Ajouter une nouvelle entr√©e
      			InventaireFutur est un Enregistrement de FutureInventory
      			InventaireFutur.idProduct				= idProduitLocal
      			InventaireFutur.forecastQuantity		= invFuturLocal.forecastQuantity.value
      			InventaireFutur.forecastDate			= Remplace( invFuturLocal.forecastDate.value,"-","")
      			HAjoute(FutureInventory, InventaireFutur)
      		FIN
      	FIN
      FIN
      
      RENVOYER Vrai
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : HwAAAB4AAAB7MB8NZB5rGUbyk77+IjQnJ74vm430Ar3yq0zmP05sGBBw0ur17uG6ZWry
  original_name : COL_SansNom1
resources :
 string_res :
  identifier : 0x17d816450020111f
  internal_properties : HwAAAB4AAAA809Qj/IAi+r8QXyrnW7sarQeYORCUjKBkmMeTFexSj5AuvTfTUpN0Eg==
custom_note :
 internal_properties : HwAAAB4AAADnl3uxgA6ylw4vtqUKEOJQD3VAAOKeNUmhPNojcRFoDpHEcUyYAw==
